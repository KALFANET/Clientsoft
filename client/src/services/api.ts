import axios from "axios";

// ◊õ◊™◊ï◊ë◊™ ◊î-Backend
const API_URL = "http://localhost:4000/api";

// üõ†Ô∏è ◊§◊ï◊†◊ß◊¶◊ô◊î ◊©◊û◊ï◊°◊ô◊§◊î ◊ò◊ï◊ß◊ü ◊ú◊õ◊ï◊™◊®◊ï◊™
const getAuthHeaders = () => {
  const apiKey = localStorage.getItem("AGENT_API_KEY"); // ‚úÖ ◊ò◊¢◊ô◊†◊™ ◊î-API_KEY ◊û◊î◊ê◊ó◊°◊ï◊ü
  if (!apiKey) {
    console.error("‚ùå API Key is missing! Please register the device first.");
    return {};
  }
  return { Authorization: `Bearer ${apiKey}` };
};

// üìå ◊ß◊ë◊ú◊™ ◊®◊©◊ô◊û◊™ ◊û◊õ◊©◊ô◊®◊ô◊ù ◊û◊î◊©◊®◊™
export const fetchDevices = async () => {
  try {
    const response = await axios.get(`${API_URL}/devices`, { headers: getAuthHeaders() });
    
    if (!Array.isArray(response.data.devices)) {
      console.error("‚ö†Ô∏è API response is not an array!", response.data);
      return response.data.devices || [];
    }
    
    return response.data.devices;
  } catch (error) {
    console.error("‚ùå Error fetching devices:", (error as any)?.response?.data || (error as any)?.message || error);
    return [];
  }
};

// üìå ◊®◊ô◊©◊ï◊ù ◊û◊õ◊©◊ô◊® ◊ó◊ì◊©
export const registerDevice = async (deviceData: { macAddress: string; ipAddress: string; os: string; username: string }) => {
  try {
    const response = await axios.post(`${API_URL}/devices/register`, deviceData);
    if (response.data.apiKey) {
      localStorage.setItem("AGENT_API_KEY", response.data.apiKey);
      console.log("‚úÖ API Key saved:", response.data.apiKey);
    }
    return response.data;
  } catch (error) {
    console.error("‚ùå Error registering device:", (error as any)?.response?.data || (error as any)?.message || error);
  }
};

// üìå ◊©◊ú◊ô◊ó◊™ ◊§◊ß◊ï◊ì◊î ◊û◊®◊ó◊ï◊ß ◊ú◊û◊õ◊©◊ô◊® (◊õ◊ô◊ë◊ï◊ô, ◊ê◊ô◊™◊ó◊ï◊ú)
export const sendRemoteCommand = async (deviceId: string, command: string) => {
  try {
    const response = await axios.post(
      `${API_URL}/devices/command`,
      { deviceId, command },
      { headers: getAuthHeaders() }
    );
    console.log(`üì° Command sent: ${command} to device ${deviceId}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error sending command '${command}' to device ${deviceId}:`, (error as any)?.response?.data || (error as any)?.message || error);
  }
};

// üìå ◊õ◊ô◊ë◊ï◊ô ◊û◊õ◊©◊ô◊®
export const shutdownDevice = async (deviceId: string) => {
  return sendRemoteCommand(deviceId, "shutdown");
};

// üìå ◊ê◊ô◊™◊ó◊ï◊ú ◊û◊õ◊©◊ô◊®
export const restartDevice = async (deviceId: string) => {
  return sendRemoteCommand(deviceId, "restart");
};

// üìå ◊î◊™◊ß◊†◊™ ◊™◊ï◊õ◊†◊î ◊ë◊î◊™◊ê◊ù ◊ú◊û◊¢◊®◊õ◊™ ◊î◊î◊§◊¢◊ú◊î
export const installSoftware = async (deviceId: string, softwareUrl: string, os: string) => {
  try {
    const response = await axios.post(
      `${API_URL}/software/install`,
      { deviceId, softwareUrl, os },
      { headers: getAuthHeaders() }
    );
    return response.data;
  } catch (error) {
    console.error(`‚ùå Error installing software on device ${deviceId}:`, (error as any)?.response?.data || (error as any)?.message || error);
  }
};